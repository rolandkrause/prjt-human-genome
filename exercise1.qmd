---
title: "Human genome annotation"
author: "Aurelien Ginolhac, Eric Koncina"
date: "2023-10-02"
---



## Human genes analysis

> Parse [GENCODE](http://www.gencodegenes.org/) data to summarise some key features of the human genome.

### Setup a project repository
The project will handle large data sets. 
Ensure that the code can be run in the evaluation completely, i.e. that data is download, not stored in the repository. This will require an installation script.


### Download data, set-up

- Go on the [latest human release](https://www.gencodegenes.org/human/) of **GENCODE** .

- Download the **Comprehensive gene annotation** as _Content_ and **CHR** as _Regions_.
Pick the **`GFF3`** format.


- Install the Bioconductor package  [`rtracklayer`](http://bioconductor.org/packages/release/bioc/html/rtracklayer.html) to parse GFF files

- The environment management tool `renv` should be installed in your global library. Initiate the project and store the state of package using `renv::snapshot()`. Check the `renv.lock` file to ensure that all required packages are listed. 

### Import the GFF file

- Import the GFF from GENCODE using the `import()` function from the package `rtracklayer`. Assign the result as `gencode`.

::: {.callout-warning}
This steps requires some large memory, such as ~ 4 Gb. So your computer needs at least 8 Gb to perform this project. The object `gencode` below is 1.09 Gb alone.
:::

::: {.callout-tip}
`import()` returns an object of class GRanges. Converting to a `tibble` is more than encouraged.\
**Of note:** This operation takes about 2-3 minutes. You may want to save the object while testing your workflow. Moreover, the warning about 
`Warning in as.data.frame(mcols(x), ...): Arguments in '...' ignored` could be ignored.
:::

### Explore the human genome

- What are the dimensions of this table?
  

- There are too many lines for the number of genes we expect for the human genome (_i.e_ ~ 20,000 genes). Look at the column `type`. What kind of data is this column?

  
- Display the levels of `type`

::: {.callout-tip}
#### Count of each level from the `type` column.

Even if counting can be done manually with `dplyr`. Later, try to be lazy and let `ggplot2` doing the job
:::

::: {.callout-notes}
- sorting the x-axis elements based on the count greatly help the reader to appreciate numbers. `forcats::infreq()` is your friend
- flipping coordinates help to read the x-axis labels. You can map the `y` aesthetic to `type` . 
- report the counts inside the bars to highlight them. Use `stat = "count"` in `geom_text()`. Using a fixed coordinate is also fine.
- a lighter theme like `theme_classic()` is usually better
- title and subtitle in the `labs()` give some context
- large numbers are usually easier to read with thousand comma separators. `scales::comma()` does it for you

:::



- From the previous plot, how many **gene** entries do you have?
  

- Plot the distribution of the number of transcripts per gene, highlight the mean and median

::: {.callout-tip}
The best columns for transcripts and genes are `transcripts_id` and `gene_id`.
By distribution, we expect the density or binned histogram of the univariate number of transcript per gene. 
Depending on the distribution shape, log-transforming the counts is an option
:::

- How many transcripts per gene do you observe using either the mean or the median in linear scale?
  
- How do you explain the discrepancy between mean or median?

### Focus on genes

Now, let's look at genes only.

- Filter the `gencode` to restrict rows where type is **gene**, save as `genes`

- Plot the counts of `gene_type` for `genes` in the same way you did the `type`. Sorting the counts. 
You can restrict to counts > 500 to avoid showing all the smaller categories

We can observe quite many unique `gene_type`, even restriction to the ones that are present > 500 times.

- Collapse the levels of `gene_type` to create 4 meta-categories:
    + protein_coding as **prot_coding**
    + pseudogene as **pseudo**
    + **RNA**
    + lump the rest as **rest**

::: {.callout-tip}
`fct_collapse()` combine with `fct_other()` from the `forcats` package are your best friend.
See below an example of collapsing levels with "RNA", then "c" and "d" and finally group the rest in a "rest" level.
:::




### Genes per chromosome

Are the genes uniformly distributed across the genome? To address this question, we want to count the number of genes per chromosome and normalizing by the chromosome length.

You can use this [file from USCS](http://hgdownload-test.cse.ucsc.edu/goldenPath/hg38/bigZips/hg38.chrom.sizes) to get the chromosome sizes.

- plot the gene density per chromosome and facet per the 4 meta categories


::: {.callout-tip}
- For the chromosome sizes, the file is a tabulated file with no header. You can delete all the random and unplaced contigs and keep only the 23 chromosomes + the mitochondria. See example below 
- Dor the density, express the number of genes per mega-bases
- For facets, one column makes the plot easier to read
he:::




- Leaving out the **pseudogene** and **other** categories, what is striking in the results? What is so special with the MT?

- Re-plot filtering out the mitochondria and keeping only **prot_coding** and **RNA**

- What is the chromosome with the highest gene density?

### Gene sizes

How the gene sizes distribution look like? Here we are several questions, we are need to split sequentially.
Also, we keep the 4 meta-categories previously obtained since they represent different kind of genes.

- plot the distribution of **gene** sizes using a density geometry filled by meta-category. The column `width` is directly giving you the length in base pairs.

::: {.callout-tip}
- some genes have an extreme lengths, log-transformation must be evaluated.
- to keep the axis info in linear scale, you can use the function `annotation_logticks()`
- densities have by default no transparency, you should play with the `alpha` parameter
:::

- Which meta-category has the most normal distribution after log-transformation? And the largest average size?

- What is roughly the **mode** of this normal distribution after log-transformation?

